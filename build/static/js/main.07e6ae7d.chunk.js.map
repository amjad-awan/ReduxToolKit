{"version":3,"sources":["logo.svg","redux/slices/counterSlice.js","redux/store.js","comp/DummyComp.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","console","log","payload","actions","store","configureStore","reducer","counter","counterReducer","Dummy","count","useSelector","data","dispatch","useDispatch","react_default","a","createElement","onClick","App","es","className","DummyComp","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qKCM3BC,EAAeC,YAAY,CACtCC,KAAM,UACNC,aANmB,CACnBC,MAAO,GAMPC,SAAU,CACRC,UAAW,SAACC,GACVA,EAAMH,OAAS,GAEjBI,UAAW,SAACD,GACVA,EAAMH,OAAS,GAEjBK,kBAAmB,SAACF,EAAOG,GACzBC,QAAQC,IAAIL,GACZA,EAAMH,OAASM,EAAOG,cAM+Bb,EAAac,QAAzDR,cAAsBG,KAAXD,YAAWC,mBAEtBT,IAAf,QCxBae,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,KCYEC,MAZf,WACE,IAAMC,EAAQC,YAAY,SAACC,GAAD,OAAUA,EAAKL,QAAQd,QAC3CoB,EAAWC,cACjB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKP,GACLK,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAML,EAASlB,OAAhC,aACAoB,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAML,EAASf,EAAkB,OAAlD,SCOSqB,MAXf,WACE,OACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAUhB,MAAOA,GACfW,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACK,EAAD,SCAOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCtC,EAAAuC,EAAA,GAAAC,KAAAxC,EAAAyC,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHxB,EAAAC,EAAAC,cAACF,EAAAC,EAAMwB,WAAP,KACEzB,EAAAC,EAAAC,cAACwB,EAAD,QAOJlB","file":"static/js/main.07e6ae7d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState,\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.value += 1;\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      console.log(state);\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport counterReducer from \"./slices/counterSlice\";\r\nexport const store = configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { increment, incrementByAmount } from \"../redux/slices/counterSlice\";\r\n\r\nfunction Dummy() {\r\n  const count = useSelector((data) => data.counter.value);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div>\r\n      <h1>{count}</h1>\r\n      <button onClick={() => dispatch(increment())}>INCREMENT</button>\r\n      <button onClick={() => dispatch(incrementByAmount(10))}>VAL</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dummy;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport Dummy from \"./comp/DummyComp\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <h1>REDUX</h1>\n        <Dummy />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}